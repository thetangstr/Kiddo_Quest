rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin (using email check to avoid circular permissions)
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'thetangstr@gmail.com';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(ownerId) {
      return request.auth != null && request.auth.uid == ownerId;
    }
    
    // Helper function to check if user is admin or owner
    function isAdminOrOwner(ownerId) {
      return request.auth != null && (request.auth.uid == ownerId || isAdmin());
    }
    
    // User profiles - users can only access their own data, admins can access all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read, write: if request.auth != null && isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Child profiles - only the parent who created them can access
    match /childProfiles/{profileId} {
      allow read, write: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Quests - only the parent who created them can access
    match /quests/{questId} {
      allow read, write: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Rewards - only the parent who created them can access
    match /rewards/{rewardId} {
      allow read, write: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Quest completions - parents can read/write their children's completions
    match /questCompletions/{completionId} {
      // Allow reading for authenticated users (needed for querying)
      allow read: if request.auth != null;
      // Allow creating new completions if user will be the parent
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      // Allow updating/deleting if user is the parent (for existing records)
      allow update, delete: if request.auth != null && resource.data.parentId == request.auth.uid;
      // Admin access to all operations
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // Feedback reports - users can create their own, admins can read all
    match /feedbackReports/{reportId} {
      // Allow authenticated users to create feedback with their userId
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Also allow anonymous feedback (when not logged in)
      allow create: if request.auth == null && request.resource.data.userId == 'anonymous';
      // Allow users to read their own feedback, admins can read all
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      // Only admins can update/write
      allow write, update: if request.auth != null && isAdmin();
    }
    
    // Invitations - only admins can manage
    match /invitations/{invitationId} {
      allow create, read, write, update, delete: if request.auth != null && isAdmin();
    }
    
    // User activity tracking - users can only track their own activity
    match /userActivity/{userId} {
      allow create, read, write, update: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && isAdmin();
    }
    
    // Admin-only collections
    match /adminLogs/{logId} {
      allow create, read, write, update, delete: if request.auth != null && isAdmin();
    }
    
    // NEW COLLECTIONS FOR PHASE 1 & 2
    
    // Levels - read-only for all authenticated users
    match /levels/{levelId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Badges - read for all authenticated, write only by system/admin
    match /badges/{badgeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Streaks - parent can read/write their children's streaks
    match /streaks/{streakId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Analytics Reports - parents can read their own reports
    match /analyticsReports/{reportId} {
      allow read: if request.auth != null && resource.data.familyId == request.auth.uid;
      allow create, update: if request.auth != null && request.resource.data.familyId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Penalty Rules - parents can manage their own rules
    match /penaltyRules/{ruleId} {
      allow read, write: if request.auth != null && resource.data.familyId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.familyId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Family Goals - parents can manage their family goals
    match /familyGoals/{goalId} {
      allow read, write: if request.auth != null && resource.data.familyId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.familyId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Quest Templates - read for all authenticated, write only by admin
    match /questTemplates/{templateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Photo Verifications - parents can manage their children's photos
    match /photoVerifications/{photoId} {
      allow read: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.parentId == request.auth.uid;
      allow update: if request.auth != null && resource.data.parentId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Notification Preferences - users manage their own preferences
    match /notificationPreferences/{prefId} {
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow write: if request.auth != null && isAdmin();
    }
  }
}
